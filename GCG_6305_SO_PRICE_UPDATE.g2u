Program.Sub.Preflight.Start
Program.Sub.Preflight.End

Program.Sub.Main.Start
'Function.Intrinsic.UI.UsePixels ' Allows you to use Pixels instead of Twips throughout
v.Local.iRet.Declare

f.Intrinsic.ui.Msgbox("Running this script will update the price on Sales order which have the Area field marked as 'P' with the price retrieved from the list price on the inventory master(part price code multipliers will be applied). Do you wish to proceed?","Sales order Price update",4,v.Local.iRet)

f.Intrinsic.Control.If(v.Local.iRet,=,6)
	f.Intrinsic.Control.CallSub(compile_data)
f.Intrinsic.Control.Else
	f.Intrinsic.Control.End
f.Intrinsic.Control.EndIf


Program.Sub.Main.End

Program.Sub.Compile_Data.Start
F.Intrinsic.Control.Try
	v.Local.sFileName.Declare
	v.Local.sLog.Declare
	v.Local.sDate.Declare
	v.Local.sTime.Declare
	V.Local.sError.Declare
	f.Intrinsic.ui.InvokeWaitDialog("Compiling Data from open order lines which have Area set as 'P'.","Sales order Price update")
	f.ODBC.Connection!conx.OpenCompanyConnection
	
	f.Data.Datatable.CreateFromSQL("dtMain","conx","select A.order_no,a.record_no,a.price as Old_Price,f.Amt_Price as New_Price,a.part,b.customer,case when e.multiplier is null then 1 else e.multiplier end as Multiplier from V_ORDER_LINES a inner Join V_Order_header b on a.Order_no = b.order_no inner Join V_INVENTORY_MST2 c on a.part = c.part and a.location = c.location inner Join V_INVENTORY_MSTR f on a.part = f.part and a.location = f.location inner join V_CUSTOMER_SALES d on b.customer = d.customer left join  OE_PRICE_CODE e on c.part_price_code = e.cd and d.price_class = e.CUst_Class where b.AREA = 'P'",true)
	f.ODBC.Connection!conx.Close
	f.Data.Datatable.AddExpressionColumn("dtMain","Fin_Price","Float","New_price*multiplier")
	
	f.Intrinsic.Control.If(v.DataTable.dtMain.ActiveRowCount,=,0)
		f.Intrinsic.UI.Msgbox("No records found that need to be updated.")
		f.Intrinsic.Control.End
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.ui.ChangeWaitStatus("Creating Log")
	
	f.Intrinsic.String.Format(v.Ambient.Time,"mmddyyyy",v.Local.sDate)
	f.Intrinsic.String.Format(v.Ambient.Time,"HhNn",v.Local.sTime)
	f.Intrinsic.string.Build("{0}\Update_6305_{1}{2}.csv",v.Caller.GasDir,v.Local.sDate,v.Local.sTime,v.Local.sFileName)
	
	
	f.Data.DataView.Create("dtMain","DvMainLog",22)
	Function.Data.DataView.ToString("dtMain","DvMainLog",",",v.Ambient.NewLine,v.Local.sLog)
	F.Intrinsic.File.String2File(V.Local.sFileName,v.Local.sLog)
	
	f.Intrinsic.ui.ChangeWaitStatus("Formatting Data")
	
	f.Intrinsic.Control.CallSub("Format_data")
	

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End 
F.Intrinsic.Control.EndTry
Program.Sub.Compile_Data.End


Program.Sub.Format_Data.Start
F.Intrinsic.Control.Try


	V.Local.sError.Declare(String)
	v.Local.sClmn.Declare
	v.Local.sRet.Declare
	V.Local.sFiledir.Declare
	V.Local.sReturnCode.Declare
	

	
	F.Data.DataTable.AcceptChanges("dtMain")
	
	
	F.Data.DataTable.AddColumn("dtMain","lType","string","L")
	F.Data.DataTable.AddColumn("dtMain","dmyclmn","string","")
'	F.Data.DataTable.AddColumn("dtMain","COST_1","string","")
	F.Data.DataTable.AddColumn("dtMain","PRICE_SF_1","string","")
	
	'v.Local.sClmn.Set("lType*!*ORDER_NO*!*Lno*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*COST_1*!*PRICE_SF_1*!*DESCRIPTION*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*discount*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn")
	v.Local.sClmn.Set("lType*!*ORDER_NO*!*Lno*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*PRICE_SF_1*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn*!*dmyclmn")
	f.Data.DataTable.AddExpressionColumn("dtMain","Lno","string","substring(Record_no,1,3)")
	'f.Data.DataTable.SetValueFormat("dtMain",-1,"CalcDiscount","COST_1","0000000000.000000")
	f.Data.DataTable.SetValueFormat("dtMain",-1,"Fin_Price","PRICE_SF_1","0000000000.000000")
	
	f.Data.DataView.Create("dtMain","DVExport")
	Function.Data.DataView.ToString("dtMain","DVExport",v.Local.sClmn,",",v.Ambient.NewLine,v.Local.sRet)
	
	'cPrice 16 digits - last 6 decimals
	'Lno = '001
	'remove decimals
	f.Intrinsic.String.Replace(v.Local.sRet,".","",v.Local.sRet)
	
	f.Data.DataView.Close("dtMain","DVExport")
	f.Data.DataTable.Close("dtMain")
	
	
	f.Intrinsic.Control.CallSub(Upload_Data,"sData",v.Local.sRet)

	
	F.Intrinsic.Control.ExitSub


F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End 
F.Intrinsic.Control.EndTry
Program.Sub.Format_Data.End

Program.Sub.Upload_Data.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare(String)
	V.Local.sReturnCode.Declare
	V.Local.sFiledir.Declare
	f.Intrinsic.ui.ChangeWaitStatus("Running Call wrapper for upload.")
	'Sales.UpdateOrderHeaderAndLinesByFile, and the properties are company, calling program, screenless and input file name
	F.Intrinsic.String.Concat(V.Caller.FilesDir,"\","SOUPDLINES.TXT",V.Local.sFiledir)
	F.Intrinsic.File.String2File(V.Local.sFiledir,v.Args.sData)
	
	F.Global.Callwrapper.New("Test","Sales.UpdateOrderHeaderAndLinesByFile")
	F.Global.Callwrapper.SetProperty("Test","Screenless",1)
	F.Global.Callwrapper.SetProperty("Test","InputFileName","SOUPDLINES.TXT")
	F.Global.CallWrapper.Run("Test")
	
	F.Global.CallWrapper.GetProperty("Test","Status",V.Local.sReturnCode)
	f.Intrinsic.UI.CloseWaitDialog
	
	f.Intrinsic.Control.If(V.Local.sReturnCode,=,"Success")
		f.Intrinsic.UI.Msgbox("Callwrapper upload completed.")
	f.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox("callwrapper upload failed.")
	f.Intrinsic.Control.EndIf 
	
	
	
	
	F.Intrinsic.Control.End


F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End 
F.Intrinsic.Control.EndTry
Program.Sub.Upload_Data.End

Program.Sub.Comments.Start
${$5$}$2.0.0.0$}$2
${$6$}$adsouza$}$20210331145101959$}$JX3L09Cgehg7O+lKYSb2ur8FFsJUp9u/KK796rXXYsCqEOiE3huq5EO8PJ99HCh3sLI+ag/LkEk=
Program.Sub.Comments.End